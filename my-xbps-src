#!/bin/bash
# vim: set ts=4 sw=4 et:
set -eu

# Get cwd of this script
# https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself
cwd="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)" 2>/dev/null
[[ $cwd ]] && cd $cwd || exit 123

# Define paths
templates_dir=srcpkgs
custom_templates_dir=my-srcpkgs
custom_template_diffs_dir=diff-srcpkgs

l="------------------------------------------------------------------------------"

_chapter() {
    echo $l
    echo -e $@
    echo $l
}

# Use with || continue
_chapter_question_build() {
    [[ ${all:-} = true ]] && return 0
    [[ ${all:-} = false ]] && return 1

    echo $l

    while true
    do
        echo -n "$@ [y,n,a,s,i,q,?]? "
        read answer

        unset skip ignore all
        case ${answer:0:1} in
            # proceed
            y ) echo $l ; return 0 ;;
            n ) echo $l ; return 1 ;;
            # proceed with special var
            a ) all=true ; echo $l ; return 0 ;;
            # proceed with special var
            s ) skip=true ; echo $l ; return 0 ;;
            # proceed with special var
            i ) ignore=true ; echo $l ; return 0 ;;
            q ) echo $l ; exit 0 ;;
            * ) echo '
y - build now
n - do not build
s - skip version
i - ignore package
q - quit
a - build all following updates
? - print help
'
                ;;
        esac
    done
}

# Use with || continue
_chapter_question_build_fail_continue() {
    echo $l

    while true
    do
        echo -n "skip $p update [y,n,q]? "
        read answer

        case ${answer:0:1} in
            y )
                # Skip
                sed -i '/_my_field_skip_version/d' $template
                sed -i "/^_my_field_repo=/a _my_field_skip_version=$upstream_rev" $template
                echo $l
                ;;
            n )
                echo $l
                ;;
            q )
                echo $l
                exit 0
                ;;
            * )
                # Ask again
                continue
                ;;
        esac
        break
    done
}

_sync_my_pkgs() {
    (
        cd $custom_templates_dir

        # Remove obsolete symlinks of custom packages
        find ../$templates_dir -maxdepth 1 -xtype l -exec rm -iv {} +
        # TODO becomes replaced with rsync
        # Remove obsolete symlinks among supplementary files
        find . -xtype l -exec rm -iv {} +
        # TODO becomes replaced with rsync
        # Remove empty dirs among supplementary files
        find . -type d -empty -exec rm -riv {} +

        local custom_package
        for custom_package in *
        do
            local relpath_custom=../$custom_templates_dir/$custom_package
            local relpath_custom_link=../$templates_dir/$custom_package
            local relpath_original=../$templates_dir/${custom_package%-git}

            # Create symlinks of custom packages
            ln -svn $relpath_custom $relpath_custom_link 2>/dev/null || true

            if [[ -e $relpath_original && $relpath_original != $relpath_custom_link ]]
            then
                # Rsync supplementary files to custom packages
                rsync -a --exclude template --delete $relpath_original/ $custom_package
            fi
        done
    )
}

_update_void_packages() {
    _chapter 'update void-packages'
    git fetch --all --prune
    [[ -z $(git status --untracked-files=no --porcelain) ]] || local do_stash=true
    [[ ${do_stash:-} = true ]] && git stash push
    # FIXME hardcode
    git rebase origin/master
    [[ ${do_stash:-} = true ]] && git stash pop --index
}

_update_system() {
    _update_void_packages

    _sync_my_pkgs

    _chapter 'update host pkgs'
    sudo vpm up
    sudo vpm ar
    _chapter 'update build env'
    ./xbps-src bootstrap-update
}

# common/xbps-src/shutils/common.sh
_get_subpkgs() {
    local f
    for f in $(typeset -F)
    do
        case "$f" in
            *_package) echo "${f%_package}" ;;
        esac
    done
}

update_my_pkgs() {
    if [[ $@ ]]
    then
        local force=true
        local mypkgs=$@
    else
        cd $custom_templates_dir
        # Omitting symlinks
        # -printf '%P\n' - erases leftmost dir from output
        local mypkgs=$(find . -maxdepth 1 -mindepth 1 ! -type l -printf '%P\n') || cd $cwd
        cd $cwd
    fi

    # FIXME
    # workaround for silly issue https://github.com/golang/go/issues/27161
    # makes all unremovable (by rm) files to become removable - by adding +w to their dirs
    [[ -d masterdir/builddir ]] && \
        find masterdir/builddir \
            -type d ! -perm -u+w ! -perm -g+w ! -perm -o+w ! -perm -a+w \
            -exec chmod +w {} +
    # FIXME possible hazard
    rm -rf hostdir/binpkgs/ masterdir/{builddir,destdir}/
    rm -f /tmp/my-xbps-log
    mkdir -p masterdir/repos/

    _update_system

    local p
    for p in $mypkgs
    do
        template=$templates_dir/$p/template
        [[ -f $template ]] || { echo "=> ${0##*/}: expected $(pwd)/$template to be a file" ; return 1 ; }
        unset _my_field_autoinstall _my_field_ignore _my_field_repo _my_field_repo_branch _my_field_skip_version
        # workaround for some variables possible missing in templates
        set +u
        # FIXME 2>/dev/null || true - workaround for vopt_enable: command not found
        source $template &>/dev/null || true
        set -u

        # FIXME hardcoded git
        [[ $p =~ 'git' ]] && local git=true

        # Skip build if it's ignored and not forced
        [[ ${force:-} != true && ${_my_field_ignore:-} ]] && continue

        if [[ ${git:-} = true ]]
        then
            echo "=> ${0##*/}: checking updates $p"

            local upstream_rev_long=$( \
                git ls-remote $_my_field_repo \
                $(test ${_my_field_repo_branch:-} && echo -n $_my_field_repo_branch || echo -n HEAD) \
                | awk '{print $1}' \
            )
            upstream_rev=${upstream_rev_long:0:7}
        else
            upstream_rev=$version
        fi

        if [[ ${force:-} != true ]]
        then
            if [[ $upstream_rev = $version || $upstream_rev = ${_my_field_skip_version:-} ]]
            then
                continue
            fi
        fi

        _chapter_question_build "build $p $upstream_rev" || continue

        if [[ ${force:-} != true ]]
        then
            if [[ ${skip:-} = true ]]
            then
                sed -i '/_my_field_skip_version/d' $template
                sed -i "/^_my_field_repo=/a _my_field_skip_version=$upstream_rev" $template
                continue
            # TODO improve: now if forcing build 1 pkg and choosing "i" - then it's not added to ignore and it's built - should be the opposite
            elif [[ ${ignore:-} = true ]]
            then
                sed -i '/_my_field_ignore/d' $template
                sed -i '/^_my_field_repo=/i _my_field_ignore=1' $template
                continue
            fi
        fi

        cp $template /tmp/${p}_old
        if [[ ${git:-} = true ]]
        then
            sed "0,/^version/{s/^version=.*/version=$upstream_rev/}" $template > /tmp/${p}_new
        # FIXME this is not needed
        else
            cp $template /tmp/${p}_new
        fi

        # Put previous template on ctrl-c
        trap "
            mv /tmp/${p}_old $template 2>/dev/null || true
            _chapter_question_build_fail_continue
            continue
        " SIGINT

        mv /tmp/${p}_new $template

        # TODO implement noautoinstall
        #[[ $_my_field_autoinstall = false ]] && local noautoinstall[$p]=$p

        # TODO store latest commit revision of each PKG in diff dir
        # g log --pretty=short -n2 . << wip

        # Define and check original template
        # FIXME hardcoded git
        local original_template=$templates_dir/${p%-git}/template
        if [[ -e $original_template && $original_template != $template ]]
        then
            diff --ignore-blank-lines --old-line-format=-%L --new-line-format=+%L --unchanged-line-format= \
                <(grep -vE '^version|^revision|^distfiles|^checksum' $original_template) \
                <(grep -vE '^version|^revision|^distfiles|^checksum' $template) \
                > $custom_template_diffs_dir/$p.diff || true
        fi

        # Remove skip before build
        sed -i '/_my_field_skip_version/d' $template
        # Build
        if ! ./xbps-src -C pkg $p
        then
            # Put previous template on build fail
            mv /tmp/${p}_old $template 2>/dev/null || true
            _chapter_question_build_fail_continue
            continue
        fi

        local built=true

        if [[ ${git:-} = true && -e masterdir/builddir/$p-$upstream_rev ]]
        then
            (
                cd masterdir/builddir/$p-$upstream_rev

                local log=$(git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --abbrev-commit $version..$upstream_rev 2>/dev/null || true)
                if [[ $log ]]
                then
                    echo -e "$p\n\n$log\n\n" >> /tmp/my-xbps-log
                else
                    true
                fi
            )
        fi
    done

    # Show log if not empty
    [[ -e /tmp/my-xbps-log ]] && less /tmp/my-xbps-log

    if [[ ${built:-} ]]
    then
        # TODO don't hardcode these rules, calculate them
        sudo xdowngrade $(find hostdir/binpkgs \
            '!' -name '*-devel-*' \
            '!' -name '*-dbg-*' \
            -name '*.xbps' \
        )
        xbps-query -m | rev | cut -d - -f 2- | rev > ~/.xbps-manual-pkgs
    else
        _chapter "nothing to install"
    fi
}

cleanup() {
    _update_void_packages

    _chapter 'perform cleanup'
    ./xbps-src clean
    ./xbps-src clean-repocache
    ./xbps-src remove-autodeps
    ./xbps-src zap
    rm -rf hostdir/sources/
    ./xbps-src binary-bootstrap
    _chapter 'cleanup success'
}

#
# Main switch
#
case ${1:-} in
    up)
        if [[ ${2:-} ]]
        then
            shift
            update_my_pkgs $@
        else
            update_my_pkgs
        fi
        ;;
    cleanup)
        cleanup
        ;;
    *)
        echo "${0##*/}: invalid parameter ${1:-}"
        exit 1
        ;;
esac

# TODO
# use 'global' vars, and make 'local' by default
# first check for updates, then do system updates and build pkgs...
